@{
    ViewData["Title"] = "Task";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="containerMainT">

    <div class="containersearch2">
        <div class="containerSelector">
            <input type="radio" class="selector" id="selector1" name="selector" checked>
            <label for="selector1"><i class="fa-solid fa-magnifying-glass iconInp"></i></label>
            <input type="radio" class="selector" id="selector2" name="selector">
            <label for="selector2"> <i class="fa-solid fa-calendar-days iconInp"></i></label>
        </div>

        <div class="containerHeaderInputs" id="containerHeaderInputs">
            <div class="containerInputT" id="inpSearch">
                <input type="text" class="inp" id="txtSearch" autocomplete="off">
                <label for="">Search</label>
                <i class="fa-solid fa-magnifying-glass iconInp"></i>
            </div>
            <div class="containerInputT" id="inpDate">
                <input type="text" class="inp" id="dtFechaVencimiento" autocomplete="off">
                <label for="">Expiration date</label>
                <i class="fa-solid fa-calendar-days iconInp"></i>
            </div>

        </div>
    </div>

    <br><br>

    <div class="containersearch">

        <form id="formTask">

            <div class="containerTitleAndDate">

                <input type="number" class="inp" id="IdTask" name="IdTask" autocomplete="off">

                <div class="containerInputTf">
                    <input type="text" class="inp" id="TaskName" name="TaskName" autocomplete="off">
                    <label for="">Task title</label>
                    <i class="fa-solid fa-list-check iconInp"></i>
                </div>
                <div class="containerInputTf">
                    <input type="text" id="FechaVencimiento" name="FechaVencimiento" autocomplete="off">
                    <label for="">Expiration date</label>
                    <i class="fa-solid fa-calendar-days iconInp"></i>
                </div>
                <div class="containerInputT">
                    <select type="text" class="inp focus" id="Prioridad" name="Prioridad" autocomplete="off">
                        <option value="0">Select an option</option>
                        <select />
                        <label for="">Prioridad</label>
                        <i class="fa-solid fa-calendar-days iconInp"></i>
                </div>

            </div>

            <div class="containerInputTf">
                <input type="text" class="inp" id="Descripcion" name="Descripcion" autocomplete="off">
                <label for="">Description</label>
                <i class="fa-regular fa-comment-dots iconInp"></i>
                <button type="submit" id="btnSubmitAddTask"><i class="fa-solid fa-plus"></i></button>
            </div>

        </form>

        <div class="containerTask" id="containerTask">
            
            @* 
             <div class="containerIconListEmpty">
            <i class="fa-solid fa-rectangle-list"></i>
            </div> 

            <div class="task canceled">
                <input type="checkbox">
                <p>Esta es la primer tarea</p>
                <div class="task__containerActions">
                    <i class="fa-solid fa-pencil"></i>
                    <i class="fa-solid fa-trash-can"></i>
                </div>
            </div>


            <div class="task completed">
                <input type="checkbox">
                <p>Esta es la primer tarea</p>
                <div class="task__containerActions">
                    <i class="fa-solid fa-pencil"></i>
                    <i class="fa-solid fa-trash-can"></i>
                </div>
            </div>
            <div class="task">
                <input type="checkbox">
                <p>Esta es la primer tarea</p>
                <div class="task__containerActions">
                    <i class="fa-solid fa-pencil"></i>
                    <i class="fa-solid fa-trash-can"></i>
                </div>
            </div>
            <div class="task">
                <input type="checkbox">
                <p>Esta es la primeeffdfsd fds fdsf dsf sd fdsfsdf sdf  fsdf fds fds fdsf ds  fsd fdsf dsf sdf sdfsdfds fsdf dsf sdfs df sdr tarea</p>
                <div class="task__containerActions">
                    <i class="fa-solid fa-pencil"></i>
                    <i class="fa-solid fa-trash-can"></i>
                </div>
            </div>
            *@


        </div>

    </div>





</div>





<template id="templateTask">
    <div class="task">
        <input type="checkbox" id="statusInpTask">
        <p id="inpTaskName">Esta es la primer tarea</p>
        <div class="task__containerActions">
            <i class="fa-solid fa-arrow-rotate-left" title="Regresar" id="iconReturnTask"></i>
            <i class="fa-solid fa-ban" title="Cancelar" id="iconCancelTask"></i>
            <i class="fa-solid fa-pencil" title="Editar" id="iconUpdateTask"></i>
            <i class="fa-solid fa-trash-can" title="Eliminar" id="iconDeleteTask"></i>
        </div>
    </div>
</template>






<script src="https://kit.fontawesome.com/da829a2c90.js" crossorigin="anonymous"></script>


@section scripts{
    <script src="https://code.jquery.com/jquery-3.6.0.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
    <script>
        $(function () {
            $("#FechaVencimiento").datepicker({
                dateFormat: 'dd/mm/yy',
                changeMonth: true,
                changeYear: true,
                yearRange: '1910:2023',
                maxDate: new Date()
            });
        });


    </script>

    }


<script type="text/javascript">



    const Search = document.getElementById("txtSearch");
    const dateSearch = document.getElementById("dtFechaVencimiento");

    const inputs = document.querySelectorAll(".inp");

    inputs.forEach(input => {
        input.addEventListener("focus", () => {
            input.classList.add("focus");
        })

        input.addEventListener("blur", () => {
            if (input.value.trim() == "") {
                input.value = "";
                input.classList.remove("focus");
            }
        })
    });



    const selector1 = document.getElementById("selector1");
    const selector2 = document.getElementById("selector2");
    const inpSearch = document.getElementById("inpSearch");
    const inpDate = document.getElementById("inpDate");

    selector1.addEventListener("click", typeSearch);
    selector2.addEventListener("click", typeSearch);

    const containerHeaderInputs = document.getElementById("containerHeaderInputs");

    function typeSearch() {
        if (selector1.checked == true) {
            inpSearch.classList.add("inpActive");
            inpDate.classList.remove("inpActive");
            dateSearch.value = "";

        } else {

            inpDate.classList.add("inpActive");
            inpSearch.classList.remove("inpActive");
            Search.value = "";

        }
    }





    const templateTask = document.getElementById("templateTask");

    const fgTask = document.createDocumentFragment();

    const containerTask = document.getElementById("containerTask");


    document.addEventListener("DOMContentLoaded", async () => {
        esperar();
        await validarSession();
        await typeSearch();
        await PrioridadGetAll();
        await TaskGetAll();
    })


    const esperar = async() => {
        containerTask.innerHTML = `
                        <div class="d-flex align-items-center">
                              <strong role="status" class="text-info">Loading...</strong>
                              <div class="spinner-border ms-auto text-info" aria-hidden="true"></div>

                        </div>`;
    } 
    
    const quitarEspera = async () => {
        containerTask.innerHTML = "";
    }



    Search.addEventListener("keyup", (e)=>{

        console.log(e.key)
        if (e.key == 'Enter'){
            TaskGetAll();
        }
    });

    


    const TaskGetAll = async() => {

        esperar();
       
        let txtSearch = "";
        let dtFechaVencimiento = document.getElementById("dtFechaVencimiento");

        if (document.getElementById("txtSearch").value.trim() == "") { txtSearch = 0 } else { txtSearch = document.getElementById("txtSearch").value.trim() }
        if (document.getElementById("dtFechaVencimiento").value.trim() == "") { dtFechaVencimiento = 0 } else { dtFechaVencimiento = document.getElementById("dtFechaVencimiento").value.trim() }


        let session = JSON.parse(localStorage.getItem("account"));

        let sessionIdUsuario = Number(session.idUsuario);

        let urlTask = "http://localhost:5054/api/Task/getAll/" + sessionIdUsuario + "/" + txtSearch + "/" + dtFechaVencimiento;


        const responseTaskGetAll = await fetch(urlTask, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        });


        const resJsonTaskGetAll = await responseTaskGetAll.json();

        if (responseTaskGetAll.status == 200) {

            if (resJsonTaskGetAll.objects.length > 0){

                quitarEspera()

                resJsonTaskGetAll.objects.forEach((task) => {


                    const cloneTpTask = templateTask.content.cloneNode(true);

                    if (task.estatus.idEstatus == 1) {


                        cloneTpTask.querySelector(".task").removeChild(cloneTpTask.querySelector("#statusInpTask"));
                        //cloneTpTask.querySelector("#statusInpTask").click();
                        cloneTpTask.querySelector(".task").classList.add("completed");


                        cloneTpTask.querySelector(".task__containerActions").removeChild(cloneTpTask.querySelector("#iconCancelTask"));
                        cloneTpTask.querySelector(".task__containerActions").removeChild(cloneTpTask.querySelector("#iconUpdateTask"));

                        cloneTpTask.querySelector("#iconReturnTask").addEventListener("click", (e) => {
                            if (!e.target.checked)
                                UpdateTaskPending(task.idTask);
                        });

                    }


                    if (task.estatus.idEstatus == 2) {

                        cloneTpTask.querySelector(".task__containerActions").removeChild(cloneTpTask.querySelector("#iconReturnTask"));


                        cloneTpTask.querySelector("#iconUpdateTask").addEventListener("click", () => {
                            TaskGetById(task.idTask);
                        });
                        
                        cloneTpTask.querySelector("#iconCancelTask").addEventListener("click", (e) => {
                            UpdateTaskCanceled(task.idTask);
                        });

                        cloneTpTask.querySelector("#statusInpTask").addEventListener("click", (e) => {
                            if (e.target.checked)
                                UpdateTaskCompleted(task.idTask);
                        });



                       


                    }


                    if (task.estatus.idEstatus == 3) {

                        cloneTpTask.querySelector(".task").removeChild(cloneTpTask.querySelector("#statusInpTask"));
                        cloneTpTask.querySelector(".task").classList.add("canceled");

                        cloneTpTask.querySelector("#iconReturnTask").addEventListener("click", () => {
                                UpdateTaskPending(task.idTask);
                        });
                        cloneTpTask.querySelector(".task__containerActions").removeChild(cloneTpTask.querySelector("#iconCancelTask"));
                        cloneTpTask.querySelector(".task__containerActions").removeChild(cloneTpTask.querySelector("#iconUpdateTask"));
                       
                    }


                    

                    


                    cloneTpTask.querySelector("#inpTaskName").innerHTML = task.taskName;


                    fgTask.appendChild(cloneTpTask);




                })


                containerTask.appendChild(fgTask);



            }else{
                quitarEspera()
                containerTask.innerHTML = `
                <div class="containerIconListEmpty">
                    <i class="fa-solid fa-rectangle-list"></i>
                </div>`;
            }


        } else {
            quitarEspera();
            Swal.fire({
                icon: "error",
                title: "Oops...",
                text: resJsonTaskGetAll.message,
                footer: ''
            });
        }
    }






    const Prioridad = document.getElementById("Prioridad");


    const PrioridadGetAll = async () => {


        const responsePrioridades = await fetch("http://localhost:5054/api/Prioridad/GetAll", {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        })



        if (responsePrioridades.status == 200) {

            const resJsonPrioridades = await responsePrioridades.json();

            const fgOptionPrioridad = document.createDocumentFragment();


            resJsonPrioridades.objects.forEach((prioridad) => {
                const op = document.createElement("option")

                op.setAttribute("value", prioridad.idPrioridad);
                op.innerText = prioridad.prioridadName;
                fgOptionPrioridad.appendChild(op);
            })

            Prioridad.appendChild(fgOptionPrioridad);


        }

    }


    const formTask = document.getElementById("formTask");

    formTask.addEventListener("submit", async (e) => {

        e.preventDefault();

        let resValidacion = await validarTaskAddAndUpdate();

        if (resValidacion) {

            await taskAddAndUpdate();

        } else {


            alert("Porfavor complete todos los campos para agregar una nueva tarea")

        }

    });

    const txtIdTask = document.getElementById("IdTask");
    const TaskName = document.getElementById("TaskName");
    const FechaVencimiento = document.getElementById("FechaVencimiento");
    const PrioridadTxt = document.getElementById("Prioridad");
    const Descripcion = document.getElementById("Descripcion");



    const validarTaskAddAndUpdate = () => {

        let resultValidation = false;

        const camposTask = {
            campoTaskName: false,
            campoFechaVencimiento: false,
            campoPrioridadTxt: false,
            campoDescripcion: false
        }



        if (TaskName.value.trim() !== "") {
            camposTask["campoTaskName"] = true;
        }

        if (FechaVencimiento.value.trim() !== "") {
            camposTask["campoFechaVencimiento"] = true;
        }

        if (Number(PrioridadTxt.value) !== 0) {
            camposTask["campoPrioridadTxt"] = true;
        }

        if (Descripcion.value.trim() !== "") {
            camposTask["campoDescripcion"] = true;
        }


        if (camposTask.campoTaskName && camposTask.campoFechaVencimiento && camposTask.campoPrioridadTxt && camposTask.campoDescripcion) {
            resultValidation = true;
        }

        return resultValidation;

    }




    const TaskGetById = async(intIdTask) => {


        intIdTask = Number(intIdTask);

        let session = JSON.parse(localStorage.getItem("account"));

        let sessionIdUsuario = Number(session.idUsuario);

        const responseTaskGetById = await fetch("http://localhost:5054/api/Task/getById/" + sessionIdUsuario + "/" + intIdTask, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        });

        const resJsonTaskGetById = await responseTaskGetById.json();

        if (responseTaskGetById.status == 200) {



            if (resJsonTaskGetById.correct) {


                txtIdTask.value = resJsonTaskGetById.object.idTask;
                TaskName.value = resJsonTaskGetById.object.taskName;
                FechaVencimiento.value = resJsonTaskGetById.object.fechaVencimiento;
                PrioridadTxt.value = resJsonTaskGetById.object.prioridad.idPrioridad;
                Descripcion.value = resJsonTaskGetById.object.descripcion;


            } else {

                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: resJsonTaskGetById.message,
                    footer: ''
                });


            }


        } else {
            Swal.fire({
                icon: "error",
                title: "Oops...",
                text: resJsonTaskGetById.message,
                footer: ''
            });
        }



    }

        
    
    const btnSubmitAddTask = document.getElementById("btnSubmitAddTask");


    const taskAddAndUpdate = async () => {

        btnSubmitAddTask.innerHTML = `
                    <div class="spinner-border text-info" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
        `;
                
        
        Search.value = "";
        dateSearch.value = "";
        

        let session = JSON.parse(localStorage.getItem("account"));

        let sessionIdUsuario = Number(session.idUsuario);


        const task = {
            "idTask": Number(txtIdTask.value),
            "taskName": TaskName.value,
            "descripcion": Descripcion.value,
            "fechaCreacion": "",
            "fechaVencimiento": FechaVencimiento.value,
            "estatus": {
                "idEstatus": 2,
                "estatusName": "string"
            },
            "prioridad": {
                "idPrioridad": Number(PrioridadTxt.value),
                "prioridadName": "string"
            }
        }


        formTask.reset();


        if (Number(task.idTask) > 0) {
            //Update
            const responseUpdateTask = await fetch("http://localhost:5054/api/Task/update/" + sessionIdUsuario, {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(task)
            });

            const resJsonUpdateTask = await responseUpdateTask.json();

            if (responseUpdateTask.status == 200) {



                if (resJsonUpdateTask.correct) {

                    Swal.fire({
                        position: "center",
                        icon: "success",
                        title: resJsonUpdateTask.message,
                        showConfirmButton: false,
                        timer: 2500
                    });

                    await TaskGetAll();

                } else {

                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: resJsonUpdateTask.message,
                        footer: ''
                    });



                }


            } else {
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: resJsonUpdateTask.message,
                    footer: ''
                });
            }





        }else{


            //Add
            const responseAddTask = await fetch("http://localhost:5054/api/Task/add/" + sessionIdUsuario, {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(task)
            });

            const resJsonAddTask = await responseAddTask.json();

            if (responseAddTask.status == 200) {



                if (resJsonAddTask.correct) {

                    Swal.fire({
                        position: "center",
                        icon: "success",
                        title: resJsonAddTask.message,
                        showConfirmButton: false,
                        timer: 2500
                    });

                    await TaskGetAll();

                } else {

                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: resJsonAddTask.message,
                        footer: ''
                    });



                }


            } else {
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: resJsonAddTask.message,
                    footer: ''
                });
            }



        }




        

        btnSubmitAddTask.innerHTML = `
                <i class="fa-solid fa-plus"></i>
        `;







    }










    const UpdateTaskCompleted = async(idTask)=>{
    
        const responseUpdateTaskCompleted = await fetch("http://localhost:5054/api/Task/updateCompleted/" + Number(idTask), {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        });

        const resJsonUpdateTaskCompleted = await responseUpdateTaskCompleted.json();

        if (responseUpdateTaskCompleted.status == 200) {



            if (resJsonUpdateTaskCompleted.correct) {

                Swal.fire({
                    position: "center",
                    icon: "success",
                    title: resJsonUpdateTaskCompleted.message,
                    showConfirmButton: false,
                    timer: 2500
                });

                await TaskGetAll();

            } else {

                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: resJsonUpdateTaskCompleted.message,
                    footer: ''
                });



            }


        } else {
            Swal.fire({
                icon: "error",
                title: "Oops...",
                text: resJsonUpdateTaskCompleted.message,
                footer: ''
            });
        }


    
    }





    const UpdateTaskCanceled = async (idTask) => {

        const responseUpdateTaskCanceled = await fetch("http://localhost:5054/api/Task/updateCanceled/" + Number(idTask), {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        });

        const resJsonUpdateTaskCanceled = await responseUpdateTaskCanceled.json();

        if (responseUpdateTaskCanceled.status == 200) {



            if (resJsonUpdateTaskCanceled.correct) {

                Swal.fire({
                    position: "center",
                    icon: "success",
                    title: resJsonUpdateTaskCanceled.message,
                    showConfirmButton: false,
                    timer: 2500
                });

                await TaskGetAll();

            } else {

                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: resJsonUpdateTaskCanceled.message,
                    footer: ''
                });



            }


        } else {
            Swal.fire({
                icon: "error",
                title: "Oops...",
                text: resJsonUpdateTaskCanceled.message,
                footer: ''
            });
        }



    }






    const UpdateTaskPending = async (idTask) => {

        const responseUpdateTaskPending = await fetch("http://localhost:5054/api/Task/updatePending/" + Number(idTask), {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        });



        const resJsonUpdateTaskPending = await responseUpdateTaskPending.json();

        if (responseUpdateTaskPending.status == 200) {



            if (resJsonUpdateTaskPending.correct) {

                Swal.fire({
                    position: "center",
                    icon: "success",
                    title: resJsonUpdateTaskPending.message,
                    showConfirmButton: false,
                    timer: 2500
                });

                await TaskGetAll();

            } else {

                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: resJsonUpdateTaskPending.message,
                    footer: ''
                });



            }


        } else {
            Swal.fire({
                icon: "error",
                title: "Oops...",
                text: resJsonUpdateTaskPending.message,
                footer: ''
            });
        }



    }








    const validarSession = async () => {


        if (localStorage.getItem("account") === null) {


            location.href = '@Url.Action("Login")';

        }

    }





</script>


<style>

    @@import url('https://fonts.googleapis.com/css2?family=Lato:wght@300&display=swap');

    body {
        /*  background-color: #031e28; */
        background-image: url("https://static.wixstatic.com/media/eed407_3b5f678d46ff495ab708929cfa1c994e~mv2.jpeg/v1/fill/w_640,h_426,al_c,lg_1,q_80,enc_auto/eed407_3b5f678d46ff495ab708929cfa1c994e~mv2.jpeg");
        background-repeat: no-repeat;
        background-size: cover;
        background: rgb(3,30,40);
        background: linear-gradient(90deg, rgba(3, 30, 40, 0.785) 0%, rgba(3, 30, 40, 0.9) 43%, rgb(3, 80, 95) 100%);
    }


    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }


    option {
        color: black;
    }


    .containerMainT {
        width: 100vw;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        font-family: 'Lato', sans-serif;
        position: sticky;
        top: 0;
        left: 0;
        overflow-y: auto;
        box-sizing: border-box;
    }




    .containersearch {
        width: 80%;
        display: flex;
        flex-direction: column;
        background-color: #adaeae30;
        padding: 20px;
        margin: 0;
    }


    .containersearch2 {
        width: 80%;
        display: flex;
        flex-direction: row;
        gap: 10px;
        background-color: #adaeae30;
        padding: 10px 25px;
        margin: 15px;
    }

        .containersearch2 .containerInputT {
            height: 60px;
        }

            .containersearch2 .containerInputT label {
                top: 20px;
            }

            .containersearch2 .containerInputT .iconInp {
                top: 21px;
            }

    .containerHeaderInputs {
        width: 95%;
        display: flex;
        gap: 10px;
    }

        .containerHeaderInputs .containerInputT {
            display: none;
        }

        .containerHeaderInputs .inpActive {
            display: block;
        }


    .containerInput {
        width: 100%;
        position: relative;
        height: 50px;
        margin: 5px 0;
        border-radius: 9px;
    }



    .containerSelector {
        display: flex;
        flex-direction: column;
    }


        .containerSelector input {
            display: none;
        }

        .containerSelector label {
            padding: 10px;
            border: 1px solid #00ffff;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            width: 35px;
            height: 35px;
            transition: .2s;
            border: 1px solid #00f1b139;
            background-color: #56caa120;
            color: #00ffff;
            cursor: pointer;
        }


        .containerSelector input:checked + label {
            background-color: #00ffff4d;
        }








    .title {
        letter-spacing: 1px;
        margin: 15px 0;
    }




    .containerInput label {
        position: absolute;
        top: 14px;
        left: 45px;
        color: rgba(240, 248, 255, 0.618);
        pointer-events: none;
        transition: .1s;
    }

    .containerInput .iconInp {
        position: absolute;
        top: 15px;
        left: 15px;
        font-size: 20px;
        color: rgba(240, 248, 255, 0.326);
    }

    .containerInput input {
        width: 100%;
        height: 100%;
        border-radius: 5px;
        border: 1px solid #32716073;
        padding: 15px 50px 0 50px;
        background-color: #5c5f6036;
        color: #eee;
        outline: none;
        font-size: 17px;
    }


        .containerInput input:focus {
            border: 1px solid rgba(7, 196, 76, 0.395)
        }


    .containerInput .inp:focus {
        animation: focus .1s;
    }

    .containerInput .focus + label {
        font-size: 13px;
        top: 5px;
        font-weight: 600;
    }







    .containerTitleAndDate {
        display: flex;
        gap: 15px;
    }




    .containerInputTf {
        width: 100%;
        position: relative;
        height: 50px;
        margin: 5px 0;
        border-radius: 9px;
        display: flex;
        gap: 15px;
    }



        .containerInputTf label {
            position: absolute;
            left: 45px;
            color: rgba(240, 248, 255, 0.618);
            pointer-events: none;
            transition: .1s;
            font-size: 13px;
            top: 5px;
            font-weight: 600;
        }

        .containerInputTf .iconInp {
            position: absolute;
            top: 15px;
            left: 15px;
            font-size: 20px;
            color: rgba(240, 248, 255, 0.326);
        }




        .containerInputTf input {
            width: 100%;
            height: 100%;
            border-radius: 5px;
            border: 1px solid #32716073;
            padding: 15px 50px 0 50px;
            background-color: #5c5f6036;
            color: #eee;
            outline: none;
            font-size: 17px;
        }


            .containerInputTf input:focus {
                border: 1px solid rgba(7, 196, 76, 0.395);
                animation: focus .1s;
            }






    .containerInputTf {
        width: 100%;
        position: relative;
        height: 50px;
        margin: 5px 0;
        border-radius: 9px;
        display: flex;
        gap: 15px;
    }

        .containerInputTf button {
            width: 80px;
            cursor: pointer;
            border-radius: 5px;
            border: 1px solid #32716073;
            background-color: #56caa144;
            color: #00ffff;
            transition: .2s;
        }

            .containerInputTf button:hover {
                background-color: #56caa17c;
            }


            .containerInputTf button:active {
                animation: focus .1s;
            }
















    .containerInputT {
        width: 100%;
        position: relative;
        height: 50px;
        margin: 5px 0;
        border-radius: 9px;
        display: flex;
        gap: 15px;
    }

        .containerInputT button {
            width: 80px;
            cursor: pointer;
            border-radius: 5px;
            border: 1px solid #32716073;
            background-color: #56caa144;
            color: #00ffff;
            transition: .2s;
        }

            .containerInputT button:hover {
                background-color: #56caa17c;
            }


            .containerInputT button:active {
                animation: focus .1s;
            }

        .containerInputT label {
            position: absolute;
            top: 14px;
            left: 45px;
            color: rgba(240, 248, 255, 0.618);
            pointer-events: none;
            transition: .1s;
        }

        .containerInputT .iconInp {
            position: absolute;
            top: 15px;
            left: 15px;
            font-size: 20px;
            color: rgba(240, 248, 255, 0.326);
        }




        .containerInputT input {
            width: 100%;
            height: 100%;
            border-radius: 5px;
            border: 1px solid #32716073;
            padding: 15px 50px 0 50px;
            background-color: #5c5f6036;
            color: #eee;
            outline: none;
            font-size: 17px;
        }


            .containerInputT input:focus {
                border: 1px solid rgba(7, 196, 76, 0.395)
            }


        .containerInputT select {
            width: 100%;
            height: 100%;
            border-radius: 5px;
            border: 1px solid #32716073;
            padding: 15px 50px 0 50px;
            background-color: #5c5f6036;
            color: #eee;
            outline: none;
            font-size: 17px;
        }


            .containerInputT select:focus {
                border: 1px solid rgba(7, 196, 76, 0.395)
            }


        .containerInputT .inp:focus {
            animation: focus .1s;
        }

        .containerInputT .focus + label {
            font-size: 13px;
            top: 5px;
            font-weight: 600;
        }




        .containerInputT label {
            position: absolute;
            top: 14px;
            left: 45px;
            color: rgba(240, 248, 255, 0.618);
            pointer-events: none;
            transition: .1s;
        }


        .containerInputT input {
            width: 100%;
            height: 100%;
            border-radius: 5px;
            border: 1px solid #32716073;
            padding: 15px 50px 0 50px;
            background-color: #5c5f6036;
            color: #eee;
            outline: none;
            font-size: 17px;
        }


            .containerInputT input:focus {
                border: 1px solid rgba(7, 196, 76, 0.395)
            }


        .containerInputT .inp:focus {
            animation: focus .1s;
        }

        .containerInputT .focus + label {
            font-size: 13px;
            top: 5px;
            font-weight: 600;
        }


    #IdTask{
        display: none;
    }



    .containerIconListEmpty {
        width: 100%;
        font-size: 300px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .containerIconListEmpty i {
            color: #00ffff08;
        }





    .containerTask {
        padding: 5px;
        border-radius: 9px;
        margin: 15px 0;
    }

        .containerTask .task {
            display: flex;
            gap: 10px;
            justify-content: space-between;
            align-items: center;
            color: aliceblue;
            padding: 20px;
            border-radius: 9px;
            margin: 20px 0;
            border: 1px solid #eeeeee65;
            transition: .2s;
            backdrop-filter: blur(5px);
        }

            .containerTask .task:hover {
                transform: translateY(-3px);
                box-shadow: 2px 5px 5px rgba(158, 204, 175, 0.197)
            }

            .containerTask .task p {
                padding: 0 15px;
                text-align: center;
            }

    .canceled {
        border: 1px solid #fc0707c9;
        background-color: #7f010145;
    }

    .completed {
        border: 1px solid #04c120be;
        background-color: #017f141f;
    }



    .task__containerActions {
        display: flex;
        gap: 15px;
        font-size: 19px;
    }

        .task__containerActions i {
            color: aliceblue;
        }

            .task__containerActions i:hover {
                color: #56caa1;
                transition: .2s;
                cursor: pointer;
            }





















    .btnSubmit {
        width: 95%;
        position: relative;
        height: 45px;
        margin: 5px 0;
        background-color: rgb(7, 170, 67);
        border-radius: 19px;
        border: none;
        cursor: pointer;
        font-size: 18px;
        transition: .21s;
    }

        .btnSubmit:hover {
            background-color: rgb(7, 196, 76);
            width: 100%;
        }



    .containerInfo {
        width: 80%;
        color: aliceblue;
        padding: 10px 0 50px 0;
    }

    .link, .link2 {
        text-decoration: none;
        color: rgb(176, 187, 251);
        font-weight: 900;
    }

        .link:hover {
            /* color: rgb(127, 186, 250); */
            color: rgb(127, 250, 229);
        }

        .link2:hover {
            color: rgb(127, 250, 229);
        }

    .containerSocial {
        width: 100%;
        display: flex;
        flex-direction: row;
        gap: 20px;
        justify-content: center;
        margin: 15px 0;
    }


        .containerSocial a {
            color: aliceblue;
            font-size: 20px;
            border: 1px solid aliceblue;
            padding: 10px;
            border-radius: 50%;
            transition: .2s;
        }


            .containerSocial a:hover {
                box-shadow: 0px 0px 10px #005a2fba;
                color: #058034;
                background-color: #d6f8e1e9;
            }


    @@keyframes focus {
        0% {
            scale: 1;
        }

        50% {
            scale: 1.02;
        }

        100% {
            scale: 1;
        }
    }




    @@media (min-width: 1050px) {

        .containersearch {
            width: 800px;
        }

        .containersearch2 {
            width: 800px;
        }
    }

</style>
